diff --git a/lpc40xx_freertos/l5_application/main.c b/lpc40xx_freertos/l5_application/main.c
index 1067670..d0a364c 100644
--- a/lpc40xx_freertos/l5_application/main.c
+++ b/lpc40xx_freertos/l5_application/main.c
@@ -2,7 +2,7 @@
 
 #include "FreeRTOS.h"
 #include "task.h"
-
+#include "lpc40xx.h"
 #include "delay.h"
 #include "gpio.h"
 #include "uart.h"
@@ -10,7 +10,7 @@
 
 static void blink_task(void *params);
 static void uart_task(void *params);
-
+static void led_task(void *params);
 static void blink_on_startup(gpio_s gpio);
 static void uart0_init(void);
 
@@ -20,16 +20,16 @@ int main(void) {
   uart0_init();
 
   // Construct the LEDs and blink a startup sequence
-  led0 = gpio__construct_as_output(gpio__port_2, 3);
-  led1 = gpio__construct_as_output(gpio__port_1, 26);
-  blink_on_startup(led1);
+  //led0 = gpio__construct_as_output(gpio__port_2, 3);
+  //led1 = gpio__construct_as_output(gpio__port_1, 26);
+  //blink_on_startup(led1);
 
-  xTaskCreate(blink_task, "led0", (512U / sizeof(void *)), (void *)&led0, PRIORITY_LOW, NULL);
-  xTaskCreate(blink_task, "led1", (512U / sizeof(void *)), (void *)&led1, PRIORITY_LOW, NULL);
+  //xTaskCreate(blink_task, "led0", (512U / sizeof(void *)), (void *)&led0, PRIORITY_LOW, NULL);
+  //xTaskCreate(blink_task, "led1", (512U / sizeof(void *)), (void *)&led1, PRIORITY_LOW, NULL);
 
   // printf() takes more stack space
-  xTaskCreate(uart_task, "uart", (512U * 4) / sizeof(void *), NULL, PRIORITY_LOW, NULL);
-
+  //xTaskCreate(uart_task, "uart", (512U * 4) / sizeof(void *), NULL, PRIORITY_LOW, NULL);
+  xTaskCreate(led_task, "led", (512U * 4) / sizeof(void *), NULL, PRIORITY_LOW, NULL);
   vTaskStartScheduler();
 
   /**
@@ -42,6 +42,25 @@ int main(void) {
   return 0;
 }
 
+static void led_task(void *pvParameters) {
+     //Choose one of the onboard LEDS by looking into schematics and write code for the below
+    //Port 2 pin 3
+    LPC_GPIO2->DIR |= (1<<3);
+    //LPC_GPIO2->PIN = 
+    //1) Set the PIN register bits for the LED
+    //2) Set the DIR register bit for the LED
+
+    while(1) {
+        //3) Use CLR register to turn the LED ON (led may be active low)
+        LPC_GPIO2->CLR = (1<<3);
+        vTaskDelay(500);
+ 
+        //4) Use SET register to turn the LED OFF
+        LPC_GPIO2->SET = (1<<3);
+        vTaskDelay(500);
+    }
+}
+
 static void blink_task(void *params) {
   const gpio_s led = *((gpio_s *)params);
 
